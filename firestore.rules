
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // First, check for the user's role in the 'users' collection.
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      // Then, check against a list of hardcoded admin emails as a fallback.
      let adminEmails = ["hussienelbaron888@gmail.com"];
      
      return (request.auth != null && userRole == 'admin') || (request.auth != null && request.auth.token.email in adminEmails);
    }

    // Publicly readable collections
    match /activities/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /trips/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /gallery/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
     match /events/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
     match /talents/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
     match /slider/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User-specific data
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
      
      // Subscriptions subcollection
      match /subscriptions/{subscriptionId} {
        allow read, create: if request.auth.uid == userId;
        allow update, delete: if isAdmin() || request.auth.uid == userId;
      }
    }
  }
}
