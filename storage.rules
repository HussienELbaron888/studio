rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isSignedIn() {
      return request.auth != null;
    }

    // You can define admin access in multiple ways.
    // Uncomment or use the one that fits your app's logic.
    function isAdminByEmail() {
      return isSignedIn() && request.auth.token.email != null && request.auth.token.email == "admin@ags-activity.com";
    }

    function isAdminByClaim() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isAdminByRole() {
      return isSignedIn()
        && exists(/databases/(default)/documents/users/$(request.auth.uid))
        && get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    function isAdmin() {
      // Using isAdminByRole as it aligns with the current app structure.
      // You can add OR conditions for other methods: isAdminByRole() || isAdminByClaim()
      return isAdminByRole();
    }

    function isAllowedImage() {
      // Allow standard image types and the generic stream some browsers might send.
      return request.resource.contentType.matches('image/.*')
        || request.resource.contentType == 'application/octet-stream';
    }

    // Allow read access to anyone for all files under the activities path.
    // Restrict write access to admins only, with file type and size validation.
    match /activities/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin()
        && isAllowedImage()
        && request.resource.size < 10 * 1024 * 1024; // Max 10MB
    }

    // Explicitly deny access to all other paths for safety.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
